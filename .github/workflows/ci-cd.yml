name: CI/CD Pipeline

on:
  push:
    branches: [ main, sit, uat ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, sit, uat ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'sit'
        type: choice
        options:
          - sit
          - uat
          - prod
      image_tag:
        description: 'Specific image tag to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean verify -B
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            target/site/jacoco
            target/site/surefire-reports
            target/site/unit-tests-report.html
            target/site/integration-tests-report.html

  build-and-push-image:
    name: Build and Push Docker image
    needs: build-and-test
    # Only build images for SIT branch and version tags
    if: |
      needs.build-and-test.result == 'success' &&
      github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/sit' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.tag }}

    permissions:
      contents: read
      packages: write
      security-events: write
      issues: write  # Add permissions to create issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_image_tag
        run: |
          # Check if this is a tag build (release)
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Use the version from the tag (vX.Y.Z -> X.Y.Z)
            TAG="${GITHUB_REF#refs/tags/v}"
            echo "Using release tag: $TAG"
          else
            # For SIT branch, use timestamp and short commit hash
            SHORT_SHA=$(git rev-parse --short HEAD)
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            TAG="sit-${TIMESTAMP}-${SHORT_SHA}"
            echo "Using SIT build tag: $TAG"
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # Also store it for other jobs
          mkdir -p ./artifacts
          echo "${TAG}" > ./artifacts/image-tag.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_image_tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: ./artifacts/image-tag.txt
          retention-days: 90

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_image_tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Add a step to create a GitHub issue with the newly built image tag
      - name: Create notification issue
        if: github.ref == 'refs/heads/sit'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = "${{ steps.set_image_tag.outputs.tag }}";
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `New image built for SIT: ${tag}`,
              body: `A new image has been built and is ready for testing in SIT environment.

              **Image Tag:** \`${tag}\`
              **Built from commit:** [${process.env.GITHUB_SHA.substring(0,7)}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${process.env.GITHUB_SHA})
              **Built at:** ${new Date().toISOString()}

              To promote this image to UAT after testing:
              1. Go to Actions -> CI/CD Pipeline -> "Run workflow"
              2. Select:
                 - Branch: \`uat\`
                 - Environment: \`uat\`
                 - Image tag: \`${tag}\`

              [Run workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/ci-cd.yml)`
            });